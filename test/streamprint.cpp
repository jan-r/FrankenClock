/*
 * This file is part of the FrankenClock project. It is licensed under the
 * BSD 3-clause license.
 *
 * Copyright 2018 Jan Reucker
 *
 * Redistribution and use in source and binary forms, with or without modification,
 * are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 *    list of conditions and the following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *
 * 3. Neither the name of the copyright holder nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
 * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

/*
 * Usage: streamprint stream.txt
 *
 * Visualizes the captured sampling output from stream.txt on the console.
 * Sampling output is generated by the FrankenClock if PRINT_BITSTREAM is
 * defined in Sampler.cpp. The bitstream is printed as hexadecimal characters;
 * groups of 4 consecutive bits form one character, with the MSB being the
 * oldest bit. So, the bitstream 0001 will be represented as '1' and 1010 will
 * be represented as 'A'. A zero bit will be visualized as '.' and a one bit
 * as '*'. Therefore, the stream 03FFC0 will be visualized as
 * ......************......
 *
 * Compile with: g++ -Wall -g -o streamprint streamprint.cpp
 */ 

#include <cstdio>
#include <cstdlib>

int main(int argc, char** argv)
{
  if (argc != 2)
  {
    fprintf(stderr, "Usage: streamprint streamlog.txt\n");
    return EXIT_FAILURE;
  }

  FILE *fh = fopen(argv[1], "r");
  if (NULL == fh)
  {
    fprintf(stderr, "*** error opening file\n");
    return EXIT_FAILURE;
  }

  int c;
  int bitcounter = 0;

  // read all characters from file
  while ( (c = fgetc(fh)) != EOF)
  {
    // convert hexadecimal character back to integer value (0-15)
    int value;
    if ((c >= '0') && (c <= '9'))
    {
      value = c - '0';
    }
    else if ((c >= 'A') && (c <= 'F'))
    {
      value = 10 + c - 'A';
    }
    else if ((c >= 'a') && (c <= 'f'))
    {
      value = 10 + c - 'a';
    }

    // print as four individual bits, MSB first
    for (int i = 0; i < 4; i++)
    {
      if (value & (1<<3))
      {
        putchar('*');
      }
      else
      {
        putchar('.');
      }
      value <<= 1;

      // add a line break every 100 bits
      if (++bitcounter >= 100)
      {
        bitcounter = 0;
        putchar('\n');
      }
    }
  }
  putchar('\n');

  return EXIT_SUCCESS;
}

